# -*- coding: utf-8 -*-
"""robi-datathon-19-easy-01

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YwfVTKhOqewZK5E23RBBWdzqvdp0DjP_

#Step 01. Install All Dependencies

This installs Apache Spark 2.3.3, Java 8, Findspark and most importnantly CSVKit library that makes it easy for Python to work on the given Big Data.
"""

#OpenJDK Dependencies for Spark
!apt-get install openjdk-8-jdk-headless -qq > /dev/null 

#Download Apache Spark
!wget -q http://apache.osuosl.org/spark/spark-2.3.3/spark-2.3.3-bin-hadoop2.7.tgz 

#Apache Spark and Hadoop Unzip
!tar xf spark-2.3.3-bin-hadoop2.7.tgz 

#FindSpark Install
!pip install -q findspark 

#CSVKit for Handling and Merging CSV Files
!pip install -q csvkit

"""# Step 02. Set Environment Variables
Set the locations where Spark and Java are installed based on your installation configuration. Double check before you proceed.
"""

import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-2.3.3-bin-hadoop2.7"

"""# Step 03. ELT - Load the Data: Mega Cloud Access
This is an alternative approach to load datasets from already stored in [**Mega Cloud**](https://mega.nz) cloud repository. You need to install the necessary packages and put the link URL of cloud to load the file from cloud directly.
"""

import os
os.system('git clone https://github.com/jeroenmeulenaar/python3-mega.git')
os.chdir('python3-mega')
os.system('pip install -r requirements.txt')

"""# Step 04. ELT - Load the Data: Read Uploaded Dataset
In this approach you can directly load the uploaded dataset downloaded fro Mega Cloud Infrastructure
"""

from mega import Mega
os.chdir('../')
m_revenue = Mega.from_ephemeral()
m_revenue.download_from_url('https://mega.nz/#!1lJH3Q4K!N94-KRSyn22FPb0yxiVJgndjxUStdlfC2_prWDYI2f0')

"""# Step 06. Start a Spark Session
This basic code will prepare to start a Spark session.
"""

import findspark
findspark.init()
from pyspark.sql import SparkSession
spark = SparkSession.builder.appName('ml-datathon19-easy01').master("local[4]").getOrCreate()

"""# Step 06. Exploration - Data Schema View
Now let's load the DataFrame and see the schema view of the Spark dataset
"""

df = spark.read.csv('revenue.csv', header = True, inferSchema = True)
df.printSchema()

"""# Step 07. Exploration - Data Type Overview
Now let's see data types of all available fields of the Spark dataset
"""

df.dtypes

"""# Step 08. Exploration - More Statistical Insights from Data
Now we'll grab total number of entries and other statistical analysis of the Spark dataset to have an overview of data
"""

df.describe().show()

"""# Step 09. Exploration - Total Unique Row Count
Now we'll grab total number of unique entries or unique row count of the Spark dataset to have an overview of duplicate data
"""

print("Unique Rows: ")
df.distinct().count()

"""# Step 10. Implementation - Run the SQL Command
Now since we got the idea that there is no NULL values and Duplicate rows, we can straightly go for executing SQL command to get the desired outcome. As a part of optimisation, we can drop of the column week_number as this is not relevant to this problem.
"""

from pyspark.sql.functions import desc
df2 = df.drop(df.week_number)
Easy01 = df2.groupBy('msisdn').agg({'revenue_usd':'sum'}).sort(desc("sum(revenue_usd)"))
Easy01 = Easy01.withColumnRenamed("sum(revenue_usd)", "TotalRevenue_USD")
Easy01 = Easy01.withColumnRenamed("msisdn", "User")
Easy01.show(n=5, truncate=False)